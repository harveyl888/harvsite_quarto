{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "author: \"Harvey\"\n",
        "title: \"Building a Quarto Extension\"\n",
        "date: \"2023-11-20\"\n",
        "description: \"First attempt at building a Quarto extension\"\n",
        "categories: [\"Quarto\"]\n",
        "---\n",
        "\n",
        "\n",
        "# Building my First Quarto Shortcode Extension\n",
        "\n",
        "[Quarto](https://quarto.org/) is a scientific publishing system used to build documents, presentations, books and websites.  Quarto extensions are a powerful way to extend the behavior of Quarto.  These extensions are built using Lua, a language that I do not have much familiarity with but, building a simple extension is actually quite straighforward.\n",
        "\n",
        "In this example I'll create a shortcode extension that allows you to add comments to a Quarto document.  The comments can be turned on or off by using an environemnt variable defined in \n",
        "\n",
        "## Initialization\n",
        "\n",
        "To initialize a Quarto shortcode extension, use the following command and enter a name for the extension (in this case *comment*)\n",
        "\n",
        "```bash\n",
        "quarto create extension shortcode\n",
        "```\n",
        "\n",
        "The following folder structure will be created:\n",
        "\n",
        "```\n",
        "comment\n",
        "├── _extensions  \n",
        "│   └── comment  \n",
        "│       ├── _extension.yml  \n",
        "│       └── comment.lua  \n",
        "├── .gitignore  \n",
        "├── .luarc.json  \n",
        "├── example.qmd\n",
        "└── README.md  \n",
        "```\n",
        "\n",
        "I use VS Code for coding.  When the `quarto create` command is executed, VS Code opens a new window at the `comment` folder, ready for development.\n",
        "\n",
        "## Building the Shortcode Extension\n",
        "\n",
        "This Quarto extension allows an author to add comments to a Quarto document.  It also adds a parameter to control if comments should included on not when a file is rendered.  I've found this extension useful when adding instructional comments to a template.\n",
        "\n",
        "The extension contains three shortcodes.  One to start a comment block, one to end a comment block and one to add an inline comment.  \n",
        "The code concept is pretty simple.  For comment blocks, surround the contents in a div with either the `cmt` class (which can be used to control styling) when the comment variable is set to true, or `display: none` when the comment variable is set to false.  For inline comments surround the contents in a span with the `cmt` class when the comment variable is set to true.\n",
        "\n",
        "The `comment.lua` file is shown below.\n",
        "\n",
        "```lua\n",
        "-- start a comment block\n",
        "function comment_start(args, kwargs, meta)\n",
        "  cmt = meta['show_comments']\n",
        "  if cmt == nil or cmt == false then\n",
        "    return pandoc.RawBlock('html', \"<div style = 'display: none;'>\")\n",
        "  else\n",
        "    return pandoc.RawBlock('html', \"<div class = 'cmt'>\")\n",
        "  end\n",
        "end\n",
        "\n",
        "-- end a comment block\n",
        "function comment_stop()\n",
        "  return pandoc.RawBlock('html', \"</div>\")\n",
        "end\n",
        "\n",
        "-- inline comment\n",
        "function comment(args, kwargs, meta)\n",
        "  txt = pandoc.utils.stringify(args[1])\n",
        "  cmt = meta['show_comments']\n",
        "  if cmt == true then\n",
        "    return pandoc.RawInline('html', \"<span class = 'cmt'>\" .. txt .. \"</span>\")\n",
        "  end \n",
        "end\n",
        "```\n",
        "\n",
        "In addition to the `comment.lua` file, an `example.qmd` should be written (plus, in this case, a `style.css` css file).  If the `example.qmd` file is previewed then it will automatically update as you edit comment.lua - a great way to ensure that your extension is working as expected.  The `example.qmd` and `style.css` files for the comment extension are shown below:\n",
        "\n",
        "```md\n",
        "---\n",
        "title: \"Comment Example\"\n",
        "format:\n",
        "  html:\n",
        "    css: style.css\n",
        "show_comments: true\n",
        "---\n",
        "\n",
        "## Comments Test - Commented text within a paragraph\n",
        "\n",
        "This is some uncommented text.\n",
        "{{</* comment_start */>}}\n",
        "Here is a <b>comment</b> containing some instructional information.\n",
        "{{</* comment_stop */>}}\n",
        "Finally, some additional uncommented text.\n",
        "\n",
        "## Comments Test - Inline commenting\n",
        "\n",
        "This comment is an inline comment {{</* comment \"It can include instruction within the text\" */>}} followed by addititional text.\n",
        "```\n",
        "\n",
        "\n",
        "```{css}\n",
        "#| eval: false\n",
        "#| title: style.css\n",
        ".cmt {\n",
        "  color: #AAAA00\n",
        "}\n",
        "```"
      ],
      "id": "c513d033"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}